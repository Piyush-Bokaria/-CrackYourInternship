//Day 44 of #CrackYourInternship
class Solution {
    public boolean isPossible(int n,int p, int[][] prerequisites)
    {
        // Your Code goes here
        int[] degree = new int[n];
        List<Integer>[] graph = new ArrayList[n];
        for(int i = 0;i < n;i++){
            graph[i] = new ArrayList<>();
        }
        for(int[] pre : prerequisites){
            graph[pre[1]].add(pre[0]);
            degree[pre[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0;i < n;i++){
            if(degree[i] == 0){
                queue.offer(i);
            }
        }
        int visited = 0;
        while(!queue.isEmpty()){
            int curr = queue.poll();
            visited++;
            
            for(int neigh : graph[curr]){
                degree[neigh]--;
                if(degree[neigh] == 0){
                    queue.add(neigh);
                }
            }
        }
        return visited == n;
    }
    
}
