//Day 30 of #CrackYourInternship
class Solution {
    private long[] prefix ;
    int count = 0;
    int l;
    int u;
    private void merge(int[] nums, int low, int mid, int high){
        long[] temp = new long[high - low + 1];
        for(int i = low;i <= high;i++){
            temp[i - low] = prefix[i];
        }
        int i = low;
        int j = mid + 1;
        int ind = low;
        while (i <= mid && j <= high) {
            if (temp[i - low] < temp[j - low]) {
                prefix[ind++] = temp[i++ - low];
            } else {
                prefix[ind++] = temp[j++ - low];
            }
        }
        while (i <= mid) {
            prefix[ind++] = temp[i++ - low];
        }
    }
    private void mergesort(int[] nums, int low, int high){
        if(low >= high){
            return;
        }
        int mid = low + (high - low)/2 ;
        mergesort(nums, low, mid);
        mergesort(nums, mid + 1, high);
        int i = mid + 1;
        int j = mid + 1;
        for(int k = low;k <= mid;k++){
            while(i <= high && prefix[i] - prefix[k] < l){
                i++;
            }
            while(j <= high && prefix[j] - prefix[k] <= u){
                j++;
            }
            count += j - i;
        }
        merge(nums, low, mid, high);
    }
    public int countRangeSum(int[] nums, int lower, int upper) {
        int n = nums.length;
        l = lower;
        u = upper;
        count = 0;
        prefix = new long[n + 1];
        for(int i = 0;i < n;i++){
            prefix[i + 1] = prefix[i] + nums[i];
        }
        mergesort(nums, 0, n);
        return count;
    }
}
