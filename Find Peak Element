//Day 42 of #CrackYourInternship
class Solution {
    long minAdjustmentCost(long arr[], int target) {
        int n = arr.length;
        long[][] dp = new long[n][101];
        
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Long.MAX_VALUE);
        }
        
        for (int j = 0; j <= 100; j++) {
            dp[0][j] = Math.abs(arr[0] - j);
        }
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= 100; j++) {
                for (int k = Math.max(0, j - target); k <= Math.min(100, j + target); k++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + Math.abs(arr[i] - j));
                }
            }
        }
        
        long minCost = Long.MAX_VALUE;
        for (int j = 0; j <= 100; j++) {
            minCost = Math.min(minCost, dp[n - 1][j]);
        }
        
        return minCost;
    }
}
