//Day 39 of #CrackYourInternship
class Solution {
    int N ;
    List<List<String>> result;
    void printSolution(int board[][])
    {
        List<String> curr = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            String str = "";
            for (int j = 0; j < N; j++) {
                if (board[i][j] == 1)
                    str = "Q" + str;
                else
                    str = "." + str;
            }
            curr.add(str);           
        }
        result.add(curr);
    }

    boolean isSafe(int board[][], int row, int col)
    {
        for (int i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        for (int i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    void solveNQUtil(int board[][], int col)
    {
        if (col >= N){
            printSolution(board);
            return;
        }

        for (int i = 0; i < N; i++) {
            
            if (isSafe(board, i, col)) {
                
                board[i][col] = 1;

                solveNQUtil(board, col + 1);

                board[i][col] = 0;
            }
        }
    }

    public List<List<String>> solveNQueens(int n) {
        result = new ArrayList<>();
        N = n;
        int[][] board = new int[n][n];
        for(int i = 0;i < n;i++){
            Arrays.fill(board[i], 0);
        }
        solveNQUtil(board, 0);
        
        return result;
    }
}
