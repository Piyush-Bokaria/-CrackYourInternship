//Day 40 of #CrackYourInternship
class Solution {
    int row;
    int col;

    private int dfs(int[][] grid, int x1, int y1, int x2, int y2, int c1) {
        if (x1 < 0 || x1 >= row || y1 < 0 || y1 >= col || grid[x1][y1] == -1) {
            return 0;
        }
        if (x1 == x2 && y1 == y2) {
            return (c1 == 0) ? 1 : 0; 
        }
        grid[x1][y1] = -1; 
        c1--; 
        int sum = dfs(grid, x1 + 1, y1, x2, y2, c1) +
                  dfs(grid, x1, y1 + 1, x2, y2, c1) +
                  dfs(grid, x1, y1 - 1, x2, y2, c1) +
                  dfs(grid, x1 - 1, y1, x2, y2, c1);
        grid[x1][y1] = 0; 
        return sum;
    }

    public int uniquePathsIII(int[][] grid) {
        int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        int c1 = 0; 
        row = grid.length;
        col = grid[0].length;

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    x1 = i;
                    y1 = j;
                } else if (grid[i][j] == 2) {
                    x2 = i;
                    y2 = j;
                } else if (grid[i][j] == 0) {
                    c1++;
                }
            }
        }
        return dfs(grid, x1, y1, x2, y2, c1 + 1); 
    }
}
