//Day 40 of #CrackYourInternship
class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<int[]> stack = new Stack<>();
        int maxArea = 0;
        for(int i = 0;i< heights.length;i++){
            int start = i;
            int h = heights[i];
            while(!stack.isEmpty() && stack.peek()[1] > h){
                int[] pair = stack.pop();
                maxArea = Math.max(maxArea, pair[1] * (i - pair[0]));
                start = pair[0];
            }
            stack.add(new int[] {start, h});
        } 
        while (!stack.isEmpty()) {
            int[] curr = stack.pop();
            maxArea = Math.max(maxArea, curr[1] * (heights.length - curr[0]));
        }
        return maxArea;
    }
    public int maxArea(int matrix[][], int n, int m) {
        // add code here.
        int result = 0;
        int[] height = new int[m];
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(matrix[i][j] == 1){
                    height[j]++;
                }
                else{
                    height[j] = 0;
                }
            }
            int area = largestRectangleArea(height);
            result = Math.max(area, result);
        }
        return result;
    }
}
