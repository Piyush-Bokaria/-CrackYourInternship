//Day 31 of #CrackYourInternship
class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {
        int n = wage.length;
        Worker[] workers = new Worker[n];
        for(int i = 0;i < n;i++){
            workers[i] = new Worker(quality[i], wage[i]);
        }
        Arrays.sort(workers);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        
        double cost = Double.MAX_VALUE;
        int total = 0;

        for(Worker w : workers){
            total += w.getQuality();
            pq.offer(w.getQuality());
            
            if(pq.size() > k){
                total -= pq.poll();
            }

            if(pq.size() == k){
                cost = Math.min(cost, w.getRatio() * total);
            }
        }
        return cost;
    }
}
class Worker implements Comparable<Worker>{
    private int quality;
    private int wage;

    public Worker(int q, int w){
        quality = q;
        wage = w;
    }

    public double getRatio(){
        return (double) wage/ quality;
    }

    public int getQuality(){
        return quality;
    }

    public int compareTo(Worker other){
        if(this.getRatio() > other.getRatio()){
            return 1;
        }
        else if(this.getRatio() < other.getRatio()){
            return -1;
        }
        return 0;
    }
}
